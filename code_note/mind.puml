@startmindmap
* jvm-sandbo-repeater
** @MetaInfServices(ModuleJarUnLoadSpi.class) 模块文件卸载hook,onstop
*** ModuleJarUnLoadComplete目前只有关闭logBack操作

** @MetaInfServices(Module.class) 沙箱模块生命周期hook
*** RepeaterModule 主入口(插件,回放,事件处理等的初始化)

** @MetaInfServices(SubscribeSupporter.class)
*** RepeatSubscribeSupporter 事件订阅处理机制

** @MetaInfServices(Repeater.class) 抽象的回放实现；统一回放基本流程，包括hook和消息反馈
*** HttpRepeater
*** DubboRepeater
*** JavaRepeater

** @MetaInfServices(MockStrategy.class) 抽象的mock策略执行；子类只需要实现方法即可
*** ReflectCompareStrategy 反射,精准匹配
*** DefaultMockStrategy 默认回放策略，阻断所有的请求
*** ParameterMatchMockStrategy 参数相似度匹配策略

** @MetaInfServices(InvokePlugin.class) 核心接口，定义一个调用插件,每个类型的流量都需要实现该插件完成录制
*** dubboPlugin
*** hibernatePlugin
*** httpPlugin
*** ibatisPlugin
*** javaPlugin
*** mybatisPlugin
*** redisPlugin
*** socketioPlugin
*** jpaPlugin
*** ....

** @MetaInfServices(Serializer.class) 抽象的序列化实现，主要完成byte[]和字符串的转换动作
*** hession
*** json
*** 无

left side

** spi机制
*** 生成:根据@MetaInfServices获取类型,生成meta-info/services下的列表(https://github.com/kohsuke/metainf-services)
*** 加载:SPILoader.loadSPI jdk内置ServiceLoader.load实现

** agent机制
*** 基于jvm-sandbox(https://github.com/alibaba/jvm-sandbox) 基于这个开源项目实现jvm注入

** 目录结构(用户主目录下)
***  sandbox sandbox主目录文件 cfg中的sandbox.properties定义了repeater地址
*** .sandbox-module  repeater的工作目录

@endmindmap
